---
- hosts: 'all'
  remote_user: 'deploy'
  become: yes

  # В данном блоке объявляются переменные, которые будут использоваться в playbook и конфигах, представленных выше
  vars:
    # Версия ruby
    ruby_version: '2.3.0'
    # Пользователь, от лица которого будет происходит деплой
    user: 'deploy'
    # Домашняя директория
    home: '/home/{{ user }}'
    # Директория установки Rbenv
    rbenv_root: '{{ home }}/.rbenv'
    # Название приложения
    name: 'threadly'
    # Путь до нашего приложения
    application: '{{ home }}/apps/{{ name }}'

  # Список задач, которые будут выполнены последовательно
  tasks:
    # Add repo for up-to-date NIGNX
    - name: 'apt | add nginx repo to APT'
      shell: add-apt-repository ppa:nginx/stable -y

    # Add repo for up-to-date postgres
    - name: 'apt | add postgresql repo to APT'
      shell: sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" >> /etc/apt/sources.list.d/pgdg.list'

    - name: 'apt | install postgresql key'
      shell: wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -

    # Обновление кеша и установка необходимых пакетов, всего программного обеспечения,
    # необходимого для работы нашего сервера
    - name: 'apt | update'
      action: 'apt update_cache=yes'

    - name: 'apt | install dependencies'
      action: 'apt pkg={{ item }}'
      # with_items - это обычный цикл в Ansible, он возьмёт и прогонит все его элементы через action
      with_items:
        - 'build-essential'
        - 'libssl-dev'
        - 'libyaml-dev'
        - 'libreadline6-dev'
        - 'zlib1g-dev'
        - 'libcurl4-openssl-dev'
        - 'git'
        - 'nginx'
        - 'redis-server'
        - 'postgresql'
        - 'postgresql-contrib'
        - 'libpq-dev'
        - 'imagemagick'
        - 'libmagickwand-dev'
        - 'nodejs'
        - 'htop'

    # Create deploy user (if it has not been created during VM setup), copy auth key,
    # copy public and private keys (need then to clone repo over SSH)
    - name: 'account | create'
      user: 'name={{ user }} shell=/bin/bash'

    #- name: 'account | copy authorized keys'
      # shell - это модуль Ansible, который позволяет выполнять обычные bash команды
      # uncomment for digital ocean
      # in other cases create deploy user in VM and add public key to .ssh dir using ssh-copy-id
      #shell: 'mkdir -p {{ home }}/.ssh -m 700 && cp /home/root/.ssh/authorized_keys {{ home }}/.ssh && chown -R {{ user }}:{{ user }} {{ home }}/.ssh'

    - name: 'account | copy ssh private key'      
      # this keys might be useful for cloning from github over SSH
      copy: 'src=configs/keys/id_rsa dest={{ home }}/.ssh/id_rsa owner={{ user }} group={{ user }} mode=0600'
      
      # this keys might be useful for cloning from github over SSH
    - name: 'account | copy ssh public key'
      copy: 'src=configs/keys/id_rsa.pub dest={{ home }}/.ssh/id_rsa.pub owner={{ user }} group={{ user }} mode=0644'

    # setup rbenv
    - name: 'rbenv | clone repo'
      git: 'repo=git://github.com/sstephenson/rbenv.git dest={{ rbenv_root }} accept_hostkey=yes'

    # check if ruby-build is installed and register plugin_installed event,
    # install rbenv, add to PATH, install ruby
    - name: 'rbenv | check ruby-build installed'
      command: 'test -x {{ rbenv_root }}/plugins/ruby-build'
      register: 'plugin_installed'
      ignore_errors: yes

    - name: 'rbenv | add bin to path'
      shell: echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> {{ home }}/.bashrc
      when: 'plugin_installed|failed'

    - name: 'rbenv | init'
      shell: echo 'eval "$(rbenv init -)"' >> {{ home }}/.bashrc
      when: 'plugin_installed|failed'

    - name: 'rbenv | clone ruby-build repo'
      git: 'repo=git://github.com/sstephenson/ruby-build.git dest={{ rbenv_root }}/plugins/ruby-build accept_hostkey=yes'
      when: 'plugin_installed|failed'

    - name: 'rbenv | check ruby {{ ruby_version }} installed'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv versions | grep {{ ruby_version }}'
      register: 'ruby_installed'
      ignore_errors: yes

    - name: 'rbenv | install ruby {{ ruby_version }}'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv install {{ ruby_version }}'
      when: 'ruby_installed|failed'

    - name: 'rbenv | set global ruby {{ ruby_version }}'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv global {{ ruby_version }}'
      when: 'ruby_installed|failed'

    - name: 'rbenv | rehash'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv rehash'
      when: 'ruby_installed|failed'

    - name: 'rbenv | create .gemrc'
      lineinfile: 'dest={{ home }}/.gemrc owner={{ user }} group={{ user }} mode=0644 line="gem: --no-ri --no-rdoc" create=yes'
      when: 'ruby_installed|failed'

    - name: 'ruby | install bundler'
      shell: 'RBENV_ROOT={{ rbenv_root }} PATH="$RBENV_ROOT/bin:$PATH" rbenv exec gem install bundler'
      when: 'ruby_installed|failed'

    - name: 'rbenv | change owner'
      shell: 'chown -R {{ user }}:{{ user }} {{ rbenv_root }}'
      when: 'ruby_installed|failed'

    # postgresql settings
    # check postgres auth settings
    - name: 'postgresql | check user'
      shell: 'psql -U postgres -c "\copyright"'
      register: 'postgres_login'
      ignore_errors: yes

    # check postgres version
    - name: 'env | postgres version'
      shell: psql --version | awk -F' ' '{print $3}' | cut -d "." -f 1,2
      register: ver

    # set postgres auth settings
    - name: 'postgresql | set auth type'
      copy: 'src=configs/postgresql/pg_hba.conf dest=/etc/postgresql/{{ ver.stdout }}/main/pg_hba.conf owner=postgres group=postgres mode=0644'
      when: 'postgres_login|failed'

    - name: 'postgresql | restart service'
      service: name=postgresql state=restarted
      when: 'postgres_login|failed'

    - name: 'postgresql | create database'
      shell: 'createdb -U postgres -O postgres -E UTF8 -l en_US.UTF-8 {{ name }}_production'
      when: 'postgres_login|failed'

    # setup and configure nginx
    - name: 'nginx | check config'
      command: 'test -f /etc/nginx/sites-enabled/{{ name }}'
      register: 'nginx_config_copied'
      ignore_errors: yes

    #- name: 'nginx | createdir'
    #  shell: 'rm /etc/nginx/sites-enabled/default' # mkdir -p etc/nginx/sites-enabled/
    #  when: 'nginx_config_copied|failed'

    - name: 'nginx | copy base nginx config'
      template: 'src=configs/nginx/base_nginx.conf dest=/etc/nginx/nginx.conf owner=root group=root mode=0644'
      when: 'nginx_config_copied|failed'

    #- name: 'nginx | copy nginx config to apps directory'
    #  template: 'src=configs/nginx/app_nginx.conf dest={{ application }}/shared/config/{{ name }}.conf owner={{ user }} group={{ user }} mode=0644'
    #  when: 'nginx_config_copied|failed'

    # create a symlink for app nginx config
    #- name: 'nginx | create symlink for nginx config'
    #  shell: 'ln -s {{ application }}/shared/config/{{ name }}.conf /etc/nginx/sites-enabled/{{ name }}'
    #  when: 'nginx_config_copied|failed'

    - name: 'nginx | restart service'      
      service: name=nginx state=restarted
      when: 'nginx_config_copied|failed'